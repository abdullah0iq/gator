// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getAllFeeds = `-- name: GetAllFeeds :many
SELECT feeds.name , feeds.url , users.name 
FROM feeds
LEFT JOIN users
ON feeds.user_id = users.id
`

type GetAllFeedsRow struct {
	Name   string
	Url    string
	Name_2 sql.NullString
}

func (q *Queries) GetAllFeeds(ctx context.Context) ([]GetAllFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeedsRow
	for rows.Next() {
		var i GetAllFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeed = `-- name: GetFeed :one
SELECT name, url, last_fetched_at, user_id FROM feeds where feeds.url = $1
`

func (q *Queries) GetFeed(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, url)
	var i Feed
	err := row.Scan(
		&i.Name,
		&i.Url,
		&i.LastFetchedAt,
		&i.UserID,
	)
	return i, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT name, url, last_fetched_at, user_id
FROM feeds
ORDER BY 
    last_fetched_at ASC NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.Name,
		&i.Url,
		&i.LastFetchedAt,
		&i.UserID,
	)
	return i, err
}

const insertFeed = `-- name: InsertFeed :one
INSERT INTO feeds (name , url , user_id)
VALUES (
    $1,
    $2,
    $3
)
RETURNING name, url, last_fetched_at, user_id
`

type InsertFeedParams struct {
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) InsertFeed(ctx context.Context, arg InsertFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, insertFeed, arg.Name, arg.Url, arg.UserID)
	var i Feed
	err := row.Scan(
		&i.Name,
		&i.Url,
		&i.LastFetchedAt,
		&i.UserID,
	)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec


UPDATE feeds
SET last_fetched_at = NOW()
WHERE url = $1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, url)
	return err
}
